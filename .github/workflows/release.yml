name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      custom_version:
        description: 'Custom version (overrides version_type)'
        required: false
        type: string
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
      
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Build package
        run: npm run build
        
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Determine version
        id: version
        run: |
          current_version=$(node -p "require('./package.json').version")
          echo "Current version: $current_version"
          
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            new_version="${{ github.event.inputs.custom_version }}"
            echo "Using custom version: $new_version"
          else
            case "${{ github.event.inputs.version_type }}" in
              "major")
                new_version=$(npm version major --no-git-tag-version)
                ;;
              "minor")  
                new_version=$(npm version minor --no-git-tag-version)
                ;;
              "patch")
                new_version=$(npm version patch --no-git-tag-version)
                ;;
              "prerelease")
                new_version=$(npm version prerelease --preid=beta --no-git-tag-version)
                ;;
              *)
                echo "Invalid version type: ${{ github.event.inputs.version_type }}"
                exit 1
                ;;
            esac
          fi
          
          # Remove 'v' prefix if present
          new_version=${new_version#v}
          tag="v$new_version"
          
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "New version will be: $new_version"
          echo "Tag will be: $tag"
          
      - name: Update package.json version
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          echo "‚úÖ Updated package.json to version ${{ steps.version.outputs.version }}"
          
      - name: Generate changelog
        id: changelog
        run: |
          echo "Generating changelog..."
          
          # Get commits since last tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$last_tag" ]; then
            commits=$(git log --pretty=format:"- %s (%h)" $last_tag..HEAD)
          else
            commits=$(git log --pretty=format:"- %s (%h)" HEAD)
          fi
          
          if [ -z "$commits" ]; then
            commits="- Initial release"
          fi
          
          changelog="## What's Changed\n\n$commits\n\n**Full Changelog**: https://github.com/${{ github.repository }}/compare/$last_tag...${{ steps.version.outputs.tag }}"
          
          # Save changelog to file for later use
          echo -e "$changelog" > CHANGELOG_TEMP.md
          echo "changelog_file=CHANGELOG_TEMP.md" >> $GITHUB_OUTPUT
          
      - name: Commit version bump
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          git add package.json package-lock.json 2>/dev/null || true
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}
          
      - name: Create GitHub Release
        if: ${{ !github.event.inputs.dry_run }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.tag }}
          body_path: CHANGELOG_TEMP.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'rc') }}
          
      - name: Cleanup
        if: always()
        run: |
          rm -f CHANGELOG_TEMP.md
          
      - name: Dry run summary
        if: ${{ github.event.inputs.dry_run }}
        run: |
          echo "üîç DRY RUN SUMMARY"
          echo "=================="
          echo "Current version: $(node -p "require('./package.json').version")"
          echo "New version would be: ${{ steps.version.outputs.version }}"
          echo "Tag would be: ${{ steps.version.outputs.tag }}"
          echo ""
          echo "Changelog would be:"
          cat CHANGELOG_TEMP.md
          echo ""
          echo "‚ö†Ô∏è This was a dry run - no changes were made" 